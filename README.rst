Proving 3-manifold groups are not left-orderable
================================================

The code in this directory is for proving that certain 3-mainfold
groups are *not* left-orderable. It has two main parts. The first is a
Python package called "quickdisorder" which depends only on "snappy",
though you will need the Python package Cython and a working C
compiler to build it, as it includes a small C extension for rapid
matrix multiplication.

To install and run the basic tests do the following in this
directory::

  python -m pip install .
  python -m quickdisorder.test

After the second command, you should see something like::

  quickdisorder.double_group: TestResults(failed=0, attempted=5)
  quickdisorder.disorder: TestResults(failed=0, attempted=7)

Typical usage in Python::

  >>> import snappy, quickdisorder
  >>> M = snappy.Manifold('m003(-5, 1)')
  >>> quickdisorder.has_non_orderable_group(M)
  ... prints out proof of non-orderability ...

For further examples, please see the docstrings in the Python source
code, which is located in the subdirectory "src/python".

While the "quickdisorder" code is not rigorous, the second part of
this software, contained in subdirectory "check_proof", uses interval
analysis to rigorously solve the word problem and can verify a
purported proof tree generated by "quickdisorder".  It requires
SageMath for the interval arithmetic and you need to install "snappy"
and "quickdisorder" into SageMath's Python for it to work.  Here is a
complete example, run from within the "check_proof" subdirectory::

  sage: import snappy, check_proof, quickdisorder
  sage: M = snappy.Manifold('m003(-5, 1)')
  sage: success, proof = quickdisorder.has_non_orderable_group(M, silent=True, return_proof=True)
  sage: success
  True
  sage: check_proof.check_proof(proof, bits_prec=100)
  True

You can also access any of the 100,000+ proofs that were used in the
paper iteself.  Here is the most complicated one in terms of the
number of leaves of its nonordering proof tree::

  sage: hard_proof = check_proof.load_proof_by_name('o9_39416(4, 1)')
  sage: len(hard_proof['proof'])  # num non root leaves
  20328
  sage: check_proof.check_proof(hard_proof, bits_prec=100)
  ...
  WordProblemError: Failed to solve the word problem at this precision.
  sage: check_proof.check_proof(hard_proof, bits_prec=200)
  True
  
You can also pick a proof at random::

  sage: some_proof = check_proof.random_proof()
  sage: some_proof['name']  # Your answer will differ!
  u'o9_36707(1, 5)'
  sage: check_proof.check_proof(some_proof, bits_prec=400)
  True
  
